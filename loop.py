import requests
import json
from rich.progress import track
from loguru import logger
import click
from collections import defaultdict
from pathlib import Path
from rich.traceback import install


@click.command()
@click.argument("output_path", type=click.Path(writable=True, file_okay=True, dir_okay=False, path_type=Path))
def download_data(output_path: Path):
    """Downloads data from the CVE API and saves to disk.

    This will save the vulnerabilities as a key-value mapping from keyword to a
    list of vulnerabilities to OUTPUT_PATH.
    """
    # A map of search keywords to vulnerabilities
    vulnerabilities = defaultdict(list)
    keywords = ["Chromium", "keras", "tensorflow", "FFmpeg"]
    logger.debug(f"Querying vulnerabilities for {len(keywords)} keywords")

    for keyword in track(keywords):
        url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        start_index = 0
        total = float("inf")

        # According to the API documentation at: https://nvd.nist.gov/developers/vulnerabilities,
        # the responses might be chunked so we might have to request the remaining chunks.
        while start_index < total:
            r = requests.get(url, params={"keywordSearch": keyword})
            json_response = r.json()
            total = json_response["totalResults"]
            start_index += json_response["resultsPerPage"]
            vulnerabilities[keyword].extend(json_response["vulnerabilities"])

    with open(output_path, "w") as f:
        json.dump(vulnerabilities, f)
    logger.info(f"Wrote JSON file to {output_path}")


if __name__ == "__main__":
    install(show_locals=True)
    download_data()  # type: ignore
